#;(define (print-p . x)
  (if (eq? x '()) '()
      (begin
        (display (car x))
        (apply print-p (cdr x)))))

#;(define time-p current-time)

(define print-p print)
(define time-p time)


(define (fact x)
          (if (< x 1) 1
              (* x (fact (- x 1)))))

(define q
  `(lambda (x)
     (if (< x 2) 1
         (+ (fib (- x 2)) (fib (- x 1))))))
 
;(eval 
; (list 'define 'fib (eval q (the-environment)))
; (the-environment))

;(define fib q)
(define fib (eval q))

(define (fib-t x)
          (let ((t (time-p)))
            (let ((f (fib x)))
              (print-p "fib " x " => " f " in "(- (time-p) t) "s\n"))))


;(set! fib (compile-procedure fib))

;(fib 35)
