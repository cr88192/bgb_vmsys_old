//bgbscm4/asm_x86nasm.c
int HpiInterp_Run2(elem ip, elem ax, elem sp, elem ep, elem rp, elem dep);
int HpiInterp_Init();
elem AsmCG_DefineSpecial(char *name, int (*func)(), int pc);
int AsmCG_GenFrag(elem form, elem *code, elem *data);
elem HpiInterp_RetrieveValueM(elem pos, elem binds);
char *AsmCG_Label(char *base);
char *AsmCG_ASIfy(char *base);
char *AsmCG_GenObject(elem obj, elem *code, elem *data);
int AsmCG_Op_Apply(elem op, elem *code, elem *data);
int AsmCG_Op_Argument(elem op, elem *code, elem *data);
int AsmCG_Op_Assign(elem op, elem *code, elem *data);
int AsmCG_Op_Bind(elem op, elem *code, elem *data);
int AsmCG_Op_BindArgs(elem op, elem *code, elem *data);
int AsmCG_Op_BindVar(elem op, elem *code, elem *data);
int AsmCG_Op_Close(elem op, elem *code, elem *data);
int AsmCG_Op_Constant(elem op, elem *code, elem *data);
int AsmCG_Op_Frame(elem op, elem *code, elem *data);
int AsmCG_Op_Halt(elem op, elem *code, elem *data);
int AsmCG_Op_Refer(elem op, elem *code, elem *data);
int AsmCG_Op_Return(elem op, elem *code, elem *data);
int AsmCG_Op_Test(elem op, elem *code, elem *data);
elem AsmCG_Op_Splice(elem op, elem *code, elem *data);
elem AsmCG_Op_XchgRPAX(elem op, elem *code, elem *data);
int AsmCG_Init();
int AsmCG_GenInitial(elem *code, elem *data);
int AsmCG_GenFinal(elem *code, elem *data);
//bgbscm4/builtin.c
elem TyFcn_SymCount();;
elem Builtin_EqP(elem a, elem b);
elem Builtin_EqvP(elem a, elem b);
elem Builtin_EqualP(elem a, elem b);
elem Builtin_NEqP(elem a, elem b);
elem Builtin_NEqualP(elem a, elem b);
elem Builtin_Not(elem a);
elem Builtin_BooleanP(elem a);
elem Builtin_BitAndP(elem a, elem b);
elem Builtin_BitOrP(elem a, elem b);
elem Builtin_BitAnd(elem a, elem b);
elem Builtin_BitOr(elem a, elem b);
elem Builtin_Car(elem a);
elem Builtin_Cdr(elem a);
elem Builtin_PairP(elem a);
elem Builtin_NullP(elem a);
elem Builtin_ListP(elem a);
elem Builtin_List(elem a);
elem Builtin_Append(elem a);
elem Builtin_SymbolP(elem a);
elem Builtin_SymbolToString(elem a);
elem Builtin_StringToSymbol(elem a);
elem Builtin_Gensym();
elem Builtin_CharP(elem a);
elem Builtin_CharEP(elem a, elem b);
elem Builtin_CharLP(elem a, elem b);
elem Builtin_CharGP(elem a, elem b);
elem Builtin_CharLEP(elem a, elem b);
elem Builtin_CharGEP(elem a, elem b);
elem Builtin_CharCiEP(elem a, elem b);
elem Builtin_CharCiLP(elem a, elem b);
elem Builtin_CharCiGP(elem a, elem b);
elem Builtin_CharCiLEP(elem a, elem b);
elem Builtin_CharCiGEP(elem a, elem b);
elem Builtin_CharToInteger(elem a);
elem Builtin_IntegerToChar(elem a);
elem Builtin_StringP(elem a);
elem Builtin_MakeString(elem a, elem b);
elem Builtin_String(elem a);
elem Builtin_StringLength(elem a);
elem Builtin_StringRect(elem a);
elem Builtin_StringRef(elem a, elem b);
elem Builtin_StringSetN(elem a, elem b, elem c);
elem Builtin_StringLP(elem a, elem b);
elem Builtin_StringGP(elem a, elem b);
elem Builtin_StringLEP(elem a, elem b);
elem Builtin_StringGEP(elem a, elem b);
static sh_lower(short c);
elem Builtin_StringCiLP(elem a, elem b);
elem Builtin_StringCiGP(elem a, elem b);
elem Builtin_StringCiLEP(elem a, elem b);
elem Builtin_StringCiGEP(elem a, elem b);
elem Builtin_Substring(elem a, elem b, elem c);
elem Builtin_StringAppend(elem a);
elem Builtin_StringToList(elem a);
elem Builtin_StringCopy(elem a);
elem Builtin_StringFillN(elem a, elem b);
elem Builtin_VectorP(elem a);
elem Builtin_MakeVector(elem a, elem b);
elem Builtin_VectorRef(elem a, elem b);
elem Builtin_VectorSetN(elem a, elem b, elem c);
elem Builtin_VectorToList(elem a);
elem Builtin_VectorFillN(elem a, elem b);
elem Builtin_MakeTaggedVector(elem a, elem b, elem c);
elem Builtin_ProcedureP(elem a);
elem Builtin_LocativeP(elem a);
elem Builtin_LocativeToInteger(elem a);
elem Builtin_IntegerToLocativeM(elem a);
elem Builtin_Contents(elem a);
elem Builtin_SetM(elem a, elem b);
elem Builtin_ClosureP(elem a);
elem CleanSyntax_Inner(elem a, elem *lst);
elem Builtin_CleanSyntax(elem a);
elem SyntaxFunc_Inner(elem a, elem *lst);
elem Builtin_SyntaxFunc(elem a);
elem Builtin_Build(elem a);
elem Builtin_Eval(elem a, elem b);
elem Builtin_LsEnvInner(elem a);
elem Builtin_LsEnv(elem a);
elem Builtin_ClosureBody(elem a);
elem Builtin_Time();
elem Builtin_TimeMS();
elem Builtin_Print(elem a);
elem Builtin_PrintCode(elem a);
elem Builtin_PrintString(elem a);
elem Builtin_ParseString(elem a);
elem Builtin_Flatten(elem a);
elem Builtin_Random(elem num);
elem Builtin_Weaken(elem ref);
int Builtin_Init();
//bgbscm4/hpi3_compile.c
elem HpiComp_PushEnv(InterpCtx *ctx);
elem HpiComp_PopEnv(InterpCtx *ctx);
elem HpiComp_PushSEnv(InterpCtx *ctx);
elem HpiComp_PopSEnv(InterpCtx *ctx);
elem HpiComp_PushDynEnv(InterpCtx *ctx);
elem HpiComp_PopDynEnv(InterpCtx *ctx);
elem TyMisc_EvalSpecial(elem func, elem parms);
elem TyMisc_EvalSpecialI(elem func, elem *parms);
elem HpiComp_DefineSpecial(char *name, elem (*func)(), int pc);
elem HpiComp_Compile(elem form, elem next, InterpCtx *ctx, int tail);;
elem HpiInterp_Run(elem form, elem env_n, elem env_d, elem dyn_n, elem dyn_d);;
elem HpiComp_CompileExpr(elem form, elem next, InterpCtx *ctx, int tail);
elem HpiComp_Lookup(elem sym, elem binds);
elem HpiComp_Compile(elem form, elem next, InterpCtx *ctx, int tail);
elem HpiSpecial_And(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_AssignN(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Begin(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_BeginFrame(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_BoundP(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_CallCC(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Case(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Cond(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Constraint(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_CurrentEnv(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_CurrentEnvObj(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Define(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_DefineSyntax(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_DefMulti(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_DefMultiVar(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Defvar(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Defmacro(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Function(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_If(elem form, elem next, InterpCtx *ctx, int tail);
elem HpiSpecial_Lambda(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_NamedLet(elem form, elem next, InterpCtx *ctx, elem tail);;
elem HpiSpecial_Let(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_LetM(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Letrec(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_LetVar(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_LocativeM(elem form, elem next, InterpCtx *ctx, elem tail);
elem Mini_Inner(elem a, elem b, InterpCtx *ctx);
elem HpiSpecial_Mini(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_NamedLet(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Or(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Quasiquote(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_QQ_Inner(elem cur, elem x, InterpCtx *ctx);
elem HpiSpecial_Quasiquote(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_DoubleQQ(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_Quote(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_SetN(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_SyntaxCase_Inner(elem kt, elem lit, elem expr, InterpCtx *ctx);
elem HpiSpecial_SyntaxCase(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiSpecial_UnquoteSplicing(elem form, elem next, InterpCtx *ctx, int tail);
elem HpiComp_Import(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiComp_Export(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiComp_Module(elem form, elem next, InterpCtx *ctx, elem tail);
elem HpiComp_Include(elem form, elem next, InterpCtx *ctx, elem tail);
int HpiComp_Init();
//bgbscm4/hpi4_interp.c
elem HpiInterp_Fold(elem rp, elem args);;
elem HpiOp_Apply(InterpCtx *ctx);
elem HpiOp_Argument(InterpCtx *ctx);
elem HpiOp_Assign(InterpCtx *ctx);
elem HpiCmd_InvalidateConstraint(elem c);
elem HpiOp_Assign2(InterpCtx *ctx);
elem HpiOp_Bind(InterpCtx *ctx);
elem HpiOp_BindArgs(InterpCtx *ctx);
elem HpiOp_BindVar(InterpCtx *ctx);
elem HpiOp_BindArgsVar(InterpCtx *ctx);
elem HpiOp_Block(InterpCtx *ctx);
elem HpiOp_Close(InterpCtx *ctx);
elem HpiOp_Constant(InterpCtx *ctx);
elem HpiOp_Constraint(InterpCtx *ctx);
elem HpiOp_Conti(InterpCtx *ctx);
elem HpiOp_CurrentEnv(InterpCtx *ctx);
elem HpiCmd_NewFrame(InterpCtx *ctx);
elem HpiOp_Frame(InterpCtx *ctx);
elem HpiOp_Func(InterpCtx *ctx);
elem HpiOp_Halt(InterpCtx *ctx);
elem HpiOp_IntsOff(InterpCtx *ctx);
elem HpiOp_IntsOn(InterpCtx *ctx);
elem HpiOp_Nuate(InterpCtx *ctx);
elem HpiCmd_EvalConstraint(InterpCtx *ctx);
elem HpiOp_Refer(InterpCtx *ctx);
elem HpiOp_ReferSyntax(InterpCtx *ctx);
elem HpiOp_Return(InterpCtx *ctx);
elem HpiOp_SetRax(InterpCtx *ctx);
elem HpiOp_Splice(InterpCtx *ctx);
elem HpiOp_Test(InterpCtx *ctx);
elem HpiOp_Trampoline(InterpCtx *ctx);
elem HpiOp_XchgRPAX(InterpCtx *ctx);
elem HpiMisc_DumpOps(InterpCtx *ctx);
elem HpiInterp_Fold(elem rp, elem args);
elem HpiInterp_DefineSpecial(char *name, elem (*func)(), int pc);
elem HpiInterp_DefineOpcode(char *name, int op);
elem HpiInterp_MiniApply(InterpCtx *ctx, elem op);
elem HpiInterp_RunStep(InterpCtx *ctx);
elem HpiInterp_RunLoop(InterpCtx *ctx);
int HpiInterp_RunLoopQuantum(elem ectx, int ms);
elem HpiInterp_Run(elem form, elem env_n, elem env_d, elem dyn_n, elem dyn_d);
elem HpiInterp_RunCtx(elem form, InterpCtx *ctx);
InterpCtx *HpiInterp_RunCtxSafe(elem form, InterpCtx *ctx);
int HpiInterp_Init();
//bgbscm4/interp.c
int Interp_Init();
int Interp_HandleRestore();
elem Interp_ReplCtx();
elem Interp_CurCtx();
elem Interp_NewCtx();
int Interp_TreeBind(elem *ntree, elem *dtree, elem var, elem val);
int Interp_DefinePrimative(char *name, elem (*func)(), int pc);
int Interp_DefineVar(char *name, elem val);
int Interp_DefineDyn(char *name, elem val);
int Interp_DefinePrimativeDyn(char *name, elem (*func)(), int pc);
elem Interp_FetchDyn(elem name);
int Interp_LetDyn(elem name, elem val);
elem Interp_FetchDynCtx(elem cur, elem name);
int Interp_LetDynCtx(elem cur, elem name, elem val);
int Interp_SetterFunc(elem cur, elem (*f)(elem v, ...), elem arg);
elem Interp_Rax(elem ectx);
elem Interp_SetRax(elem ectx, elem rax);
elem Interp_Eval(elem form, elem env_n, elem env_d, elem dyn_n, elem dyn_d);
elem Interp_EvalTop(elem form);
elem Interp_EvalStringTop(char *s);
elem Interp_EvalCurrent(elem form);
elem Interp_EvalStringCurrent(char *s);
elem Interp_EvalCurrentSafe(elem form);
elem Interp_ApplyCurrent(elem func, elem args);
elem Interp_ApplyCurrentSafe(elem func, elem args);
elem Interp_ApplyCtx(elem ctx, elem func, elem args);
elem Interp_ApplyCtxSafe(elem ctx, elem func, elem args);
elem Interp_ApplyDelayed(elem thread, elem func, elem args);
elem Interp_ApplyCtxTh(elem ctx, elem func, elem args);
elem Interp_ApplyThread(elem func, elem args);
elem Interp_Vax(elem ectx);
elem Interp_ClearVax(elem ectx);
elem Interp_Thread(elem func);
elem Interp_BlockThread(elem thread);
elem Interp_UnblockThread(elem thread);
elem Interp_SendThread(elem thread, elem msg);
elem Interp_SendThreadFrom(elem thread, elem from, elem msg);
elem Interp_SendThread(elem thread, elem msg);
elem Interp_RecieveThread();
elem Interp_SleepThread(elem s);
int Interp_CheckDelayed();
int Interp_RunQuantum(int ms);
elem Interp_Load(elem name);
//bgbscm4/main_dll.c
void *sa_alloc(int size);
void *sa_cons();
elem sa_multicons(int num, elem lst);
void *sa_malloc(int size);
void *sa_ralloc(int size);
int sa_free(void *buf);
int sa_abort();
int sa_fatal(char *s, ...);
int sa_error(char *s, ...);
int sa_print(char *s, ...);
int sa_atoi(char *s);
char *sa_prints(char *t, char *s, ...);
char *sa_itoa(int i);
char *sa_strdup(char *s);
int sa_stricmp(char *s1, char *s2);
char *sa_loadfile(char *name, int *sz);
int SAGC_AddRoot(elem *r);
int SAGC_AddNamedRoot(char *name, elem *r);
int SAGC_BindNameAddr(char *name, void *r);
int SAGC_PushRoot(elem *r);
int SAGC_PopRoot();
int SAGC_PopRoots(int n);
int Sys_TimeMS();
int Sys_TimeDUS();
elem MF_Quit();
//bgbscm4/main_dll_ka2.c
//bgbscm4/main_ka.c
//bgbscm4/main_ka2.c
void *sa_alloc(int size);
void *sa_alloc(int size);
void *sa_cons();
elem sa_multicons(int num, elem lst);
void *sa_ralloc(int size);
void *sa_malloc(int size);
int sa_free(void *buf);
int sa_mark(elem ref);
char *sa_strdup(char *s);
int sa_fatal(char *s, ...);
int sa_error(char *s, ...);
int sa_print(char *s, ...);
char *sa_prints(char *t, char *s, ...);
int sa_atoi(char *s);
char *sa_itoa(int i);
int sa_stricmp(char *s1, char *s2);
char *sa_loadfile(char *name, int *sz);
int sa_abort();
elem MF_HeapSize();
elem MF_HeapUsage();
elem MF_HeapWorking();
elem MF_GCStats();
elem MF_Quit();
int SKVM_Init();
int SKVM_DeInit();
int main(int argc, char *argv[]);
//bgbscm4/main_sa.c
void *sa_alloc(int size);
void *sa_cons();
elem sa_multicons(int num, elem lst);
void *sa_ralloc(int size);
void *sa_malloc(int size);
int sa_free(void *buf);
int sa_abort();
int sa_fatal(char *s, ...);
int sa_error(char *s, ...);
int sa_print(char *s, ...);
int sa_atoi(char *s);
char *sa_prints(char *t, char *s, ...);
char *sa_itoa(int i);
char *sa_strdup(char *s);
int sa_stricmp(char *s1, char *s2);
char *sa_loadfile(char *name, int *sz);
int SAGC_AddRoot(elem *r);
int SAGC_AddNamedRoot(char *name, elem *r);
int SAGC_BindNameAddr(char *name, void *r);
int Sys_TimeMS();
int Sys_TimeDUS();
elem MF_Quit();
int main(int argc, char *argv[]);
//bgbscm4/namespace2.c
elem Namespace2_Define(elem *ntree, elem *dtree, elem sym, elem val);
elem Namespace2_Lookup(elem ntree, elem dtree, elem sym);
elem Namespace2_Assign(elem ntree, elem dtree, elem sym, elem value);
elem Namespace2_Trace(elem ntree, elem dtree, elem last, elem sym);
elem Namespace2_RetrieveTrace(elem ntree, elem dtree, elem last);
elem Namespace2_AssignTrace(elem ntree, elem dtree, elem last, elem value);
elem Namespace2_LocativeTrace(elem ntree, elem dtree, elem last);
//bgbscm4/namespace3.c
elem Namespace3_List2Vec(elem lst);
elem Namespace3_Bind(elem *ntree, elem *dtree, elem sym, elem val);
elem Namespace3_BindArgs(elem *ntree, elem *dtree, elem vars, elem vals);
elem Namespace3_Lookup(elem ntree, elem dtree, elem sym);
elem Namespace3_Assign(elem ntree, elem dtree, elem sym, elem value);
elem Namespace3_Trace(elem ntree, elem dtree, elem last, elem sym);
elem Namespace3_RetrieveTrace(elem ntree, elem dtree, elem last);
elem Namespace3_AssignTrace(elem ntree, elem dtree, elem last, elem value);
//bgbscm4/parse.c
char *ScmParse_EatWhite(char *s);
int ScmParse_SpecialP(char *s);
char *ScmParse_Token(char *s, char *b, int *t);
elem ScmParse_List(char **s, int ind);
elem ScmParse_Vector(char **s, int ind);
elem ScmParse_Symbol(char *s);
double ScmParse_Float(char *s);
elem ScmParse_Item(char **s, int ind);
elem ScmParse_Line(char **s, int sk);
//bgbscm4/parse2.c
char *ScmParseSK_EatWhite(char *s);
int ScmParseSK_SpecialP(char *s);
int ScmParseSK_InfixP(char *s);
char *ScmParseSK_Token(char *s, char *b, int *t);
int ScmParseSK_Indent(char *s);
char *ScmParseSK_FindLine(char *s);
elem ScmParseSK_Line(char **s);
elem ScmParseSK_List(char **s, int ind);
elem ScmParseSK_Symbol(char *s);
elem ScmParseSK_Item(char **s, int ind);
//bgbscm4/parse3.c
char *ScmParseLB2_EatWhite(char *s);
int ScmParseLB2_SpecialP(char *s);
int ScmParseLB2_InfixP(char *s);
char *ScmParseLB2_Token(char *s, char *b, int *t);
int ScmParseLB2_Indent(char *s);
char *ScmParseLB2_FindLine(char *s);
elem ScmParseLB2_Block(char **s);
elem ScmParseLB2_Line(char **s);
elem ScmParseLB2_List(char **s, int ind);
elem ScmParseLB2_Symbol(char *s);
elem ScmParseLB2_Item(char **s, int ind);
//bgbscm4/ty_math.c
elem TyMath_AddBignum(elem a, elem b);
int TyMath_ToBignum(elem a, unsigned short *buf, int *len);
elem TyMath_FromBignum(unsigned short *buf, int *len);
double TyMath_ToDouble(elem a);
elem TyMath_FromDouble(double a);
elem TyMath_ToFlonum(elem a);
int TyMath_CmpFlonum(elem a, elem b);
elem TyMath_AddFlonum(elem lst);
elem TyMath_SubFlonum(elem lst);
elem TyMath_MulFlonum(elem lst);
elem TyMath_DivFlonum(elem lst);
elem TyMath_ZeroP(elem a);
elem TyMath_NonZeroP(elem a);
elem TyMath_PositiveP(elem a);
elem TyMath_NegativeP(elem a);
elem TyMath_EvenP(elem a);
elem TyMath_OddP(elem a);
elem TyMath_Min(elem a);
elem TyMath_Max(elem a);
elem TyMath_AddFixnum(elem lst);
elem TyMath_MultiplyFixnum(elem lst);
elem TyMath_SubtractFixnum(elem a, elem b);
elem TyMath_DivideFixnum(elem a, elem b);
elem TyMath_Quotient(elem a, elem b);
elem TyMath_Remainder(elem a, elem b);
elem TyMath_Modulo(elem a, elem b);
elem TyMath_NumberToString(elem a);
elem TyMath_StringToNumber(elem a);
elem TyMath_GreaterP(elem a, elem b);
elem TyMath_LessP(elem a, elem b);
elem TyMath_GreaterEqualP(elem a, elem b);
elem TyMath_LessEqualP(elem a, elem b);
elem TyMath_Sqrt(elem a);
elem TyMath_Abs(elem a);
int TyMath_Init();
//bgbscm4/ty_obj0.c
elem TyObj_GetSlot(elem obj, elem sym);
elem TyObj_GetSlot2(elem obj, elem sym);
elem TyObj_SetSlot(elem obj, elem var, elem val);
elem TyObj_Clone(elem obj);
elem TyObj_AddHandler(elem obj, elem proc);
elem TyObj_Dispatch(InterpCtx *ctx);
elem TyObj_InvokeObject(elem obj, elem msg);
elem TyObj_ApplySelf(elem obj, elem rest);
elem TyObj_BuildHandler(InterpCtx *ctx, char *pattern, elem (*proc)());
elem TyObj_ObjectP(elem a);
elem TyObj_MemberP(elem a, elem b);
elem TyObj_ObjectFlatten(elem obj);
elem TyObj_ObjectUnflatten(elem rest);
elem TyObj_ObjectPrint(elem obj);
elem TyObj_Init();
//bgbscm4/ty_obj1.c
elem TyObj_GetSlot(elem obj, elem sym);
elem TyObj_GetSlot2(elem obj, elem sym);
elem TyObj_SetSlot(elem obj, elem var, elem val);
elem TyObj_SetSlot2(elem obj, elem var, elem val);
elem TyObj_Clone(elem obj);
elem TyObj_CloneRoot();
elem TyObj_CloneNull();
elem TyObj_AddHandler(elem obj, elem proc);
elem TyObj_SlotNames(elem obj);
elem TyObj_Dispatch(InterpCtx *ctx);
elem TyObj_InvokeObject(elem obj, elem msg);
elem TyObj_ApplySelf(elem obj, elem rest);
elem TyObj_ObjectP(elem a);
elem TyObj_MemberP(elem a, elem b);
elem TyObj_NotifyLinks(elem obj, elem sym, elem lst);
elem TyObj_ObjStub(elem links);
elem TyObj_Sync(elem obj);
elem TyObj_ObjectFlatten(elem obj);
elem TyObj_UnflatLinksub(elem obj);
elem TyObj_BeginUnflatten(elem rest);
elem TyObj_ObjectUnflattenObj(elem obj, elem rest);
elem TyObj_ObjectUnflatten(elem rest);
elem TyObj_GetLinks(elem obj);
elem TyObj_SetLinks(elem obj, elem links);
elem TyObj_Notify(elem obj, elem obj2, elem state);
elem TyObj_ObjectPrint(elem obj);
elem TyObj_Init();
//bgbscm4/ty_print.c
int TyPrint_Indent(typrint_info *inf);
int TyPrint_VecType(elem obj, typrint_info *inf);
int TyPrint_Object(elem obj, typrint_info *inf);
int TyPrint_Misc(elem obj, typrint_info *inf);
int TyPrint_Elem(elem obj, typrint_info *inf);
int TyPrint_ListCode(elem lst, typrint_info *inf);
int TyPrint_ListFormatted(elem lst, typrint_info *inf);
int TyPrint_List(elem lst, typrint_info *inf);
elem TyPrint_PrintDefaults(elem obj);
elem TyPrint_PrintFlags(elem obj, elem flags);
elem TyPrint_PrintString(elem obj, elem flags);
int TyPrint_Init();
//bgbscm4/ty_typex.c
elem TyFcn_TypeX(elem sym, int sz, void *buf);
void *TypeX_Alloc(char *type, int sz);
elem TypeX_Sym(elem obj);
elem TypeX_Func(elem obj);
void *TypeX_Data(elem obj);
elem TypeX_GetReference(void *p);
elem TypeX_Apply(elem obj, elem args);
int TypeX_Mark(elem obj);
int TypeX_SwizIn(elem obj);
int TypeX_SwizOut(elem obj);
int TypeX_Print(elem obj, typrint_info *inf);
int TypeX_Free(elem obj);
elem TypeX_Flatten(elem obj);
elem TypeX_UnFlatten(elem type, elem def);
elem TypeX_Mirrors(elem obj);
elem TypeX_Stub(elem type, elem mirrors);
int TypeX_Notify(elem obj, elem other, elem state);
int TypeX_Delta(elem obj, elem var, elem val);
elem TypeX_EvalSingle(elem obj, elem ctx);
elem TypeX_EvalMulti(elem obj, elem ref, elem ctx);
int TypeX_TypeP(elem obj, char *type);
typexinfo *TypeX_Lookup(char *name);
typexinfo *TypeX_GetInfo(char *name);
int TypeX_Init();
//bgbscm4/typefcn.c
int TyFcn_Init();
elem TyFcn_SymCount();
elem TyFcn_Cons(elem a, elem b);
elem TyFcn_UnCons(elem c);
elem TyFcn_UnConsList(elem lst);
elem TyFcn_Car(elem c);
elem TyFcn_Cdr(elem c);
elem TyFcn_CarM(elem c);
elem TyFcn_CdrM(elem c);
elem TyFcn_SetCar(elem c, elem a);
elem TyFcn_SetCdr(elem c, elem a);
elem TyFcn_CarEv(elem c, elem ctx);
elem TyFcn_CdrEv(elem c, elem ctx);
elem TyFcn_NewLocative(elem *addr);
elem *TyFcn_GetLocativeAddr(elem loc);
elem TyFcn_SetLocativeAddr(elem loc, elem *addr);
elem TyFcn_LocativeNew(elem lower, elem upper, elem ty);
elem TyFcn_LocativeCopy(elem a);
elem TyFcn_ListToVector(elem lst);
elem TyFcn_VectorToList(elem a);
elem TyFcn_CopyVector(elem a);
elem TyFcn_ResizeVector(elem a, elem nl);
elem TyFcn_NewVector(elem a);
elem TyFcn_NewTypedVector(elem a, elem ty);
elem TyFcn_VectorLength(elem a);
elem TyFcn_VectorIs(elem a, elem ty);
elem TyFcn_WidenumIs(elem a, elem ty);
elem TyFcn_VectorType(elem a);
elem TyFcn_VectorRef(elem a, elem b);
elem TyFcn_VectorSet(elem a, elem b, elem c);
elem TyFcn_VectorRefM(elem a, elem b);
double TyFcn_VectorRefF(elem a, int b);
elem *TyFcn_VectorBody(elem a);
elem TyFcn_String(char *s);
elem TyFcn_String16(short *s);
elem TyFcn_MakeString(elem k, elem c);
char *TyFcn_UnString(elem a);
short *TyFcn_UnString16(elem a);
elem TyFcn_StringEP(elem a, elem b);
static sh_lower(short c);
elem TyFcn_StringCiEP(elem a, elem b);
elem TyFcn_StringE(elem a, elem b);
elem TyFcn_Symbol2(char *s, int flag);
elem TyFcn_FindSymbolInList(char *name, elem lst);
elem TyFcn_SymbolList(char *s, elem *lst);
elem TyFcn_Symbol(char *s);
elem TyFcn_KeywordBase(elem sym);
elem TyFcn_Keywordify(elem sym);
elem TyFcn_HashString(elem s);
elem TyFcn_ObjectInListP(elem obj, elem lst);
elem TyFcn_ObjPeekElem(elem obj, elem num);
elem TyFcn_ObjPokeElem(elem obj, elem num, elem val);
elem TyFcn_NReverse(elem lst);
elem TyFcn_Reverse(elem lst);
elem TyFcn_ReverseTree(elem lst);
elem TyFcn_ListCopy(elem a);
elem TyFcn_ListCopy(elem a);
elem TyFcn_ListCopyRec(elem a);
elem TyFcn_NAppend(elem lst, elem a);
elem TyFcn_Append(elem lst, elem a);
elem TyFcn_FoldMark(elem lst);
elem TyFcn_ListLength(elem lst);
elem TyFcn_ListGetEnd(elem lst);
elem TyFcn_UnList(elem lst);
elem TyFcn_ListRef(elem lst, elem idx);
elem TyFcn_Function(elem (*func)(), int pc);
elem TyFcn_Special(elem (*func)(), int pc);
elem TyFcn_Box(elem val);
elem TyFcn_UnBox(elem box);
elem TyFcn_EqualP(elem a, elem b);
elem TyFcn_MatchP(elem lit, elem a, elem b);
elem TyFcn_Match2P(elem lit, elem a, elem b);
elem TyFcn_MatchV(elem a, elem b);
elem TyFcn_MatchP2(elem a, elem b);
int TyFcn_DumpObject(elem obj);
int TyFcn_DisplayObject(elem obj);
int TyFcn_DumpString(elem s, elem port);
int TyFcn_DumpMisc(elem obj);
int TyFcn_DumpElem(elem obj);
int TyFcn_DumpList(elem lst);
int TyFcn_DisplayList(elem lst);
int TyFcn_DisplayElem(elem obj);
int TyFcn_DisplayElem(elem obj);
int TyFcn_DumpElem(elem obj);
int TyFcn_DumpElemBR(elem obj);
